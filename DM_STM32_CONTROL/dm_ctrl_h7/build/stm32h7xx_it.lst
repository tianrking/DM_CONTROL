ARM GAS  /tmp/ccusZplE.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_it.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.NMI_Handler,"ax",%progbits
  17              		.align	1
  18              		.global	NMI_Handler
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	NMI_Handler:
  26              	.LFB144:
  27              		.file 1 "Core/Src/stm32h7xx_it.c"
   1:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32h7xx_it.c **** /**
   3:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32h7xx_it.c ****   * @file    stm32h7xx_it.c
   5:Core/Src/stm32h7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32h7xx_it.c ****   * @attention
   8:Core/Src/stm32h7xx_it.c ****   *
   9:Core/Src/stm32h7xx_it.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/stm32h7xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32h7xx_it.c ****   *
  12:Core/Src/stm32h7xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32h7xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32h7xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32h7xx_it.c ****   *
  16:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32h7xx_it.c ****   */
  18:Core/Src/stm32h7xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32h7xx_it.c **** 
  20:Core/Src/stm32h7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32h7xx_it.c **** #include "main.h"
  22:Core/Src/stm32h7xx_it.c **** #include "stm32h7xx_it.h"
  23:Core/Src/stm32h7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32h7xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32h7xx_it.c **** 
  27:Core/Src/stm32h7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32h7xx_it.c **** 
  30:Core/Src/stm32h7xx_it.c **** /* USER CODE END TD */
  31:Core/Src/stm32h7xx_it.c **** 
ARM GAS  /tmp/ccusZplE.s 			page 2


  32:Core/Src/stm32h7xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32h7xx_it.c **** 
  35:Core/Src/stm32h7xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32h7xx_it.c **** 
  37:Core/Src/stm32h7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32h7xx_it.c **** 
  40:Core/Src/stm32h7xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32h7xx_it.c **** 
  42:Core/Src/stm32h7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32h7xx_it.c **** 
  45:Core/Src/stm32h7xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32h7xx_it.c **** 
  47:Core/Src/stm32h7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32h7xx_it.c **** 
  50:Core/Src/stm32h7xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32h7xx_it.c **** 
  52:Core/Src/stm32h7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32h7xx_it.c **** 
  55:Core/Src/stm32h7xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32h7xx_it.c **** 
  57:Core/Src/stm32h7xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32h7xx_it.c **** extern FDCAN_HandleTypeDef hfdcan1;
  59:Core/Src/stm32h7xx_it.c **** extern TIM_HandleTypeDef htim3;
  60:Core/Src/stm32h7xx_it.c **** extern TIM_HandleTypeDef htim4;
  61:Core/Src/stm32h7xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  62:Core/Src/stm32h7xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  63:Core/Src/stm32h7xx_it.c **** extern UART_HandleTypeDef huart1;
  64:Core/Src/stm32h7xx_it.c **** extern TIM_HandleTypeDef htim23;
  65:Core/Src/stm32h7xx_it.c **** 
  66:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN EV */
  67:Core/Src/stm32h7xx_it.c **** 
  68:Core/Src/stm32h7xx_it.c **** /* USER CODE END EV */
  69:Core/Src/stm32h7xx_it.c **** 
  70:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
  71:Core/Src/stm32h7xx_it.c **** /*           Cortex Processor Interruption and Exception Handlers          */
  72:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
  73:Core/Src/stm32h7xx_it.c **** /**
  74:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  75:Core/Src/stm32h7xx_it.c ****   */
  76:Core/Src/stm32h7xx_it.c **** void NMI_Handler(void)
  77:Core/Src/stm32h7xx_it.c **** {
  28              		.loc 1 77 1 view -0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  78:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  79:Core/Src/stm32h7xx_it.c **** 
  80:Core/Src/stm32h7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  81:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
ARM GAS  /tmp/ccusZplE.s 			page 3


  82:Core/Src/stm32h7xx_it.c ****    while (1)
  35              		.loc 1 82 4 discriminator 1 view .LVU1
  83:Core/Src/stm32h7xx_it.c ****   {
  84:Core/Src/stm32h7xx_it.c ****   }
  36              		.loc 1 84 3 discriminator 1 view .LVU2
  82:Core/Src/stm32h7xx_it.c ****   {
  37              		.loc 1 82 10 discriminator 1 view .LVU3
  38 0000 FEE7     		b	.L2
  39              		.cfi_endproc
  40              	.LFE144:
  42              		.section	.text.HardFault_Handler,"ax",%progbits
  43              		.align	1
  44              		.global	HardFault_Handler
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  48              		.fpu fpv5-d16
  50              	HardFault_Handler:
  51              	.LFB145:
  85:Core/Src/stm32h7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  86:Core/Src/stm32h7xx_it.c **** }
  87:Core/Src/stm32h7xx_it.c **** 
  88:Core/Src/stm32h7xx_it.c **** /**
  89:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  90:Core/Src/stm32h7xx_it.c ****   */
  91:Core/Src/stm32h7xx_it.c **** void HardFault_Handler(void)
  92:Core/Src/stm32h7xx_it.c **** {
  52              		.loc 1 92 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.L4:
  93:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  94:Core/Src/stm32h7xx_it.c **** 
  95:Core/Src/stm32h7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  96:Core/Src/stm32h7xx_it.c ****   while (1)
  59              		.loc 1 96 3 discriminator 1 view .LVU5
  97:Core/Src/stm32h7xx_it.c ****   {
  98:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  99:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 100:Core/Src/stm32h7xx_it.c ****   }
  60              		.loc 1 100 3 discriminator 1 view .LVU6
  96:Core/Src/stm32h7xx_it.c ****   {
  61              		.loc 1 96 9 discriminator 1 view .LVU7
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE145:
  66              		.section	.text.MemManage_Handler,"ax",%progbits
  67              		.align	1
  68              		.global	MemManage_Handler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  72              		.fpu fpv5-d16
  74              	MemManage_Handler:
ARM GAS  /tmp/ccusZplE.s 			page 4


  75              	.LFB146:
 101:Core/Src/stm32h7xx_it.c **** }
 102:Core/Src/stm32h7xx_it.c **** 
 103:Core/Src/stm32h7xx_it.c **** /**
 104:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Memory management fault.
 105:Core/Src/stm32h7xx_it.c ****   */
 106:Core/Src/stm32h7xx_it.c **** void MemManage_Handler(void)
 107:Core/Src/stm32h7xx_it.c **** {
  76              		.loc 1 107 1 view -0
  77              		.cfi_startproc
  78              		@ Volatile: function does not return.
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82              	.L6:
 108:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 109:Core/Src/stm32h7xx_it.c **** 
 110:Core/Src/stm32h7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 111:Core/Src/stm32h7xx_it.c ****   while (1)
  83              		.loc 1 111 3 discriminator 1 view .LVU9
 112:Core/Src/stm32h7xx_it.c ****   {
 113:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 114:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 115:Core/Src/stm32h7xx_it.c ****   }
  84              		.loc 1 115 3 discriminator 1 view .LVU10
 111:Core/Src/stm32h7xx_it.c ****   {
  85              		.loc 1 111 9 discriminator 1 view .LVU11
  86 0000 FEE7     		b	.L6
  87              		.cfi_endproc
  88              	.LFE146:
  90              		.section	.text.BusFault_Handler,"ax",%progbits
  91              		.align	1
  92              		.global	BusFault_Handler
  93              		.syntax unified
  94              		.thumb
  95              		.thumb_func
  96              		.fpu fpv5-d16
  98              	BusFault_Handler:
  99              	.LFB147:
 116:Core/Src/stm32h7xx_it.c **** }
 117:Core/Src/stm32h7xx_it.c **** 
 118:Core/Src/stm32h7xx_it.c **** /**
 119:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 120:Core/Src/stm32h7xx_it.c ****   */
 121:Core/Src/stm32h7xx_it.c **** void BusFault_Handler(void)
 122:Core/Src/stm32h7xx_it.c **** {
 100              		.loc 1 122 1 view -0
 101              		.cfi_startproc
 102              		@ Volatile: function does not return.
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.L8:
 123:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 124:Core/Src/stm32h7xx_it.c **** 
 125:Core/Src/stm32h7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 126:Core/Src/stm32h7xx_it.c ****   while (1)
ARM GAS  /tmp/ccusZplE.s 			page 5


 107              		.loc 1 126 3 discriminator 1 view .LVU13
 127:Core/Src/stm32h7xx_it.c ****   {
 128:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 129:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 130:Core/Src/stm32h7xx_it.c ****   }
 108              		.loc 1 130 3 discriminator 1 view .LVU14
 126:Core/Src/stm32h7xx_it.c ****   {
 109              		.loc 1 126 9 discriminator 1 view .LVU15
 110 0000 FEE7     		b	.L8
 111              		.cfi_endproc
 112              	.LFE147:
 114              		.section	.text.UsageFault_Handler,"ax",%progbits
 115              		.align	1
 116              		.global	UsageFault_Handler
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv5-d16
 122              	UsageFault_Handler:
 123              	.LFB148:
 131:Core/Src/stm32h7xx_it.c **** }
 132:Core/Src/stm32h7xx_it.c **** 
 133:Core/Src/stm32h7xx_it.c **** /**
 134:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 135:Core/Src/stm32h7xx_it.c ****   */
 136:Core/Src/stm32h7xx_it.c **** void UsageFault_Handler(void)
 137:Core/Src/stm32h7xx_it.c **** {
 124              		.loc 1 137 1 view -0
 125              		.cfi_startproc
 126              		@ Volatile: function does not return.
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130              	.L10:
 138:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 139:Core/Src/stm32h7xx_it.c **** 
 140:Core/Src/stm32h7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 141:Core/Src/stm32h7xx_it.c ****   while (1)
 131              		.loc 1 141 3 discriminator 1 view .LVU17
 142:Core/Src/stm32h7xx_it.c ****   {
 143:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 144:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 145:Core/Src/stm32h7xx_it.c ****   }
 132              		.loc 1 145 3 discriminator 1 view .LVU18
 141:Core/Src/stm32h7xx_it.c ****   {
 133              		.loc 1 141 9 discriminator 1 view .LVU19
 134 0000 FEE7     		b	.L10
 135              		.cfi_endproc
 136              	.LFE148:
 138              		.section	.text.DebugMon_Handler,"ax",%progbits
 139              		.align	1
 140              		.global	DebugMon_Handler
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv5-d16
 146              	DebugMon_Handler:
ARM GAS  /tmp/ccusZplE.s 			page 6


 147              	.LFB149:
 146:Core/Src/stm32h7xx_it.c **** }
 147:Core/Src/stm32h7xx_it.c **** 
 148:Core/Src/stm32h7xx_it.c **** /**
 149:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Debug monitor.
 150:Core/Src/stm32h7xx_it.c ****   */
 151:Core/Src/stm32h7xx_it.c **** void DebugMon_Handler(void)
 152:Core/Src/stm32h7xx_it.c **** {
 148              		.loc 1 152 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 154:Core/Src/stm32h7xx_it.c **** 
 155:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 156:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 157:Core/Src/stm32h7xx_it.c **** 
 158:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 159:Core/Src/stm32h7xx_it.c **** }
 153              		.loc 1 159 1 view .LVU21
 154 0000 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE149:
 158              		.section	.text.DMA1_Stream0_IRQHandler,"ax",%progbits
 159              		.align	1
 160              		.global	DMA1_Stream0_IRQHandler
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 164              		.fpu fpv5-d16
 166              	DMA1_Stream0_IRQHandler:
 167              	.LFB150:
 160:Core/Src/stm32h7xx_it.c **** 
 161:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
 162:Core/Src/stm32h7xx_it.c **** /* STM32H7xx Peripheral Interrupt Handlers                                    */
 163:Core/Src/stm32h7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 164:Core/Src/stm32h7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 165:Core/Src/stm32h7xx_it.c **** /* please refer to the startup file (startup_stm32h7xx.s).                    */
 166:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
 167:Core/Src/stm32h7xx_it.c **** 
 168:Core/Src/stm32h7xx_it.c **** /**
 169:Core/Src/stm32h7xx_it.c ****   * @brief This function handles DMA1 stream0 global interrupt.
 170:Core/Src/stm32h7xx_it.c ****   */
 171:Core/Src/stm32h7xx_it.c **** void DMA1_Stream0_IRQHandler(void)
 172:Core/Src/stm32h7xx_it.c **** {
 168              		.loc 1 172 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172 0000 08B5     		push	{r3, lr}
 173              	.LCFI0:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 3, -8
 176              		.cfi_offset 14, -4
 173:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
 174:Core/Src/stm32h7xx_it.c **** 
ARM GAS  /tmp/ccusZplE.s 			page 7


 175:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DMA1_Stream0_IRQn 0 */
 176:Core/Src/stm32h7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 177              		.loc 1 176 3 view .LVU23
 178 0002 0248     		ldr	r0, .L14
 179 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 180              	.LVL0:
 177:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
 178:Core/Src/stm32h7xx_it.c **** 
 179:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DMA1_Stream0_IRQn 1 */
 180:Core/Src/stm32h7xx_it.c **** }
 181              		.loc 1 180 1 is_stmt 0 view .LVU24
 182 0008 08BD     		pop	{r3, pc}
 183              	.L15:
 184 000a 00BF     		.align	2
 185              	.L14:
 186 000c 00000000 		.word	hdma_usart1_rx
 187              		.cfi_endproc
 188              	.LFE150:
 190              		.section	.text.DMA1_Stream1_IRQHandler,"ax",%progbits
 191              		.align	1
 192              		.global	DMA1_Stream1_IRQHandler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv5-d16
 198              	DMA1_Stream1_IRQHandler:
 199              	.LFB151:
 181:Core/Src/stm32h7xx_it.c **** 
 182:Core/Src/stm32h7xx_it.c **** /**
 183:Core/Src/stm32h7xx_it.c ****   * @brief This function handles DMA1 stream1 global interrupt.
 184:Core/Src/stm32h7xx_it.c ****   */
 185:Core/Src/stm32h7xx_it.c **** void DMA1_Stream1_IRQHandler(void)
 186:Core/Src/stm32h7xx_it.c **** {
 200              		.loc 1 186 1 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 08B5     		push	{r3, lr}
 205              	.LCFI1:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 187:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
 188:Core/Src/stm32h7xx_it.c **** 
 189:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DMA1_Stream1_IRQn 0 */
 190:Core/Src/stm32h7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
 209              		.loc 1 190 3 view .LVU26
 210 0002 0248     		ldr	r0, .L18
 211 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 212              	.LVL1:
 191:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
 192:Core/Src/stm32h7xx_it.c **** 
 193:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DMA1_Stream1_IRQn 1 */
 194:Core/Src/stm32h7xx_it.c **** }
 213              		.loc 1 194 1 is_stmt 0 view .LVU27
 214 0008 08BD     		pop	{r3, pc}
 215              	.L19:
ARM GAS  /tmp/ccusZplE.s 			page 8


 216 000a 00BF     		.align	2
 217              	.L18:
 218 000c 00000000 		.word	hdma_usart1_tx
 219              		.cfi_endproc
 220              	.LFE151:
 222              		.section	.text.FDCAN1_IT0_IRQHandler,"ax",%progbits
 223              		.align	1
 224              		.global	FDCAN1_IT0_IRQHandler
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu fpv5-d16
 230              	FDCAN1_IT0_IRQHandler:
 231              	.LFB152:
 195:Core/Src/stm32h7xx_it.c **** 
 196:Core/Src/stm32h7xx_it.c **** /**
 197:Core/Src/stm32h7xx_it.c ****   * @brief This function handles FDCAN1 interrupt 0.
 198:Core/Src/stm32h7xx_it.c ****   */
 199:Core/Src/stm32h7xx_it.c **** void FDCAN1_IT0_IRQHandler(void)
 200:Core/Src/stm32h7xx_it.c **** {
 232              		.loc 1 200 1 is_stmt 1 view -0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236 0000 08B5     		push	{r3, lr}
 237              	.LCFI2:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 3, -8
 240              		.cfi_offset 14, -4
 201:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */
 202:Core/Src/stm32h7xx_it.c **** 
 203:Core/Src/stm32h7xx_it.c ****   /* USER CODE END FDCAN1_IT0_IRQn 0 */
 204:Core/Src/stm32h7xx_it.c ****   HAL_FDCAN_IRQHandler(&hfdcan1);
 241              		.loc 1 204 3 view .LVU29
 242 0002 0248     		ldr	r0, .L22
 243 0004 FFF7FEFF 		bl	HAL_FDCAN_IRQHandler
 244              	.LVL2:
 205:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
 206:Core/Src/stm32h7xx_it.c **** 
 207:Core/Src/stm32h7xx_it.c ****   /* USER CODE END FDCAN1_IT0_IRQn 1 */
 208:Core/Src/stm32h7xx_it.c **** }
 245              		.loc 1 208 1 is_stmt 0 view .LVU30
 246 0008 08BD     		pop	{r3, pc}
 247              	.L23:
 248 000a 00BF     		.align	2
 249              	.L22:
 250 000c 00000000 		.word	hfdcan1
 251              		.cfi_endproc
 252              	.LFE152:
 254              		.section	.text.FDCAN1_IT1_IRQHandler,"ax",%progbits
 255              		.align	1
 256              		.global	FDCAN1_IT1_IRQHandler
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv5-d16
 262              	FDCAN1_IT1_IRQHandler:
ARM GAS  /tmp/ccusZplE.s 			page 9


 263              	.LFB153:
 209:Core/Src/stm32h7xx_it.c **** 
 210:Core/Src/stm32h7xx_it.c **** /**
 211:Core/Src/stm32h7xx_it.c ****   * @brief This function handles FDCAN1 interrupt 1.
 212:Core/Src/stm32h7xx_it.c ****   */
 213:Core/Src/stm32h7xx_it.c **** void FDCAN1_IT1_IRQHandler(void)
 214:Core/Src/stm32h7xx_it.c **** {
 264              		.loc 1 214 1 is_stmt 1 view -0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268 0000 08B5     		push	{r3, lr}
 269              	.LCFI3:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 3, -8
 272              		.cfi_offset 14, -4
 215:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */
 216:Core/Src/stm32h7xx_it.c **** 
 217:Core/Src/stm32h7xx_it.c ****   /* USER CODE END FDCAN1_IT1_IRQn 0 */
 218:Core/Src/stm32h7xx_it.c ****   HAL_FDCAN_IRQHandler(&hfdcan1);
 273              		.loc 1 218 3 view .LVU32
 274 0002 0248     		ldr	r0, .L26
 275 0004 FFF7FEFF 		bl	HAL_FDCAN_IRQHandler
 276              	.LVL3:
 219:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */
 220:Core/Src/stm32h7xx_it.c **** 
 221:Core/Src/stm32h7xx_it.c ****   /* USER CODE END FDCAN1_IT1_IRQn 1 */
 222:Core/Src/stm32h7xx_it.c **** }
 277              		.loc 1 222 1 is_stmt 0 view .LVU33
 278 0008 08BD     		pop	{r3, pc}
 279              	.L27:
 280 000a 00BF     		.align	2
 281              	.L26:
 282 000c 00000000 		.word	hfdcan1
 283              		.cfi_endproc
 284              	.LFE153:
 286              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 287              		.align	1
 288              		.global	TIM3_IRQHandler
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv5-d16
 294              	TIM3_IRQHandler:
 295              	.LFB154:
 223:Core/Src/stm32h7xx_it.c **** 
 224:Core/Src/stm32h7xx_it.c **** /**
 225:Core/Src/stm32h7xx_it.c ****   * @brief This function handles TIM3 global interrupt.
 226:Core/Src/stm32h7xx_it.c ****   */
 227:Core/Src/stm32h7xx_it.c **** void TIM3_IRQHandler(void)
 228:Core/Src/stm32h7xx_it.c **** {
 296              		.loc 1 228 1 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300 0000 08B5     		push	{r3, lr}
 301              	.LCFI4:
ARM GAS  /tmp/ccusZplE.s 			page 10


 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 3, -8
 304              		.cfi_offset 14, -4
 229:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 230:Core/Src/stm32h7xx_it.c **** 
 231:Core/Src/stm32h7xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
 232:Core/Src/stm32h7xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 305              		.loc 1 232 3 view .LVU35
 306 0002 0248     		ldr	r0, .L30
 307 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 308              	.LVL4:
 233:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
 234:Core/Src/stm32h7xx_it.c **** 
 235:Core/Src/stm32h7xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 236:Core/Src/stm32h7xx_it.c **** }
 309              		.loc 1 236 1 is_stmt 0 view .LVU36
 310 0008 08BD     		pop	{r3, pc}
 311              	.L31:
 312 000a 00BF     		.align	2
 313              	.L30:
 314 000c 00000000 		.word	htim3
 315              		.cfi_endproc
 316              	.LFE154:
 318              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 319              		.align	1
 320              		.global	TIM4_IRQHandler
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu fpv5-d16
 326              	TIM4_IRQHandler:
 327              	.LFB155:
 237:Core/Src/stm32h7xx_it.c **** 
 238:Core/Src/stm32h7xx_it.c **** /**
 239:Core/Src/stm32h7xx_it.c ****   * @brief This function handles TIM4 global interrupt.
 240:Core/Src/stm32h7xx_it.c ****   */
 241:Core/Src/stm32h7xx_it.c **** void TIM4_IRQHandler(void)
 242:Core/Src/stm32h7xx_it.c **** {
 328              		.loc 1 242 1 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332 0000 08B5     		push	{r3, lr}
 333              	.LCFI5:
 334              		.cfi_def_cfa_offset 8
 335              		.cfi_offset 3, -8
 336              		.cfi_offset 14, -4
 243:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 244:Core/Src/stm32h7xx_it.c **** 
 245:Core/Src/stm32h7xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 246:Core/Src/stm32h7xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 337              		.loc 1 246 3 view .LVU38
 338 0002 0248     		ldr	r0, .L34
 339 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 340              	.LVL5:
 247:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 248:Core/Src/stm32h7xx_it.c **** 
ARM GAS  /tmp/ccusZplE.s 			page 11


 249:Core/Src/stm32h7xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 250:Core/Src/stm32h7xx_it.c **** }
 341              		.loc 1 250 1 is_stmt 0 view .LVU39
 342 0008 08BD     		pop	{r3, pc}
 343              	.L35:
 344 000a 00BF     		.align	2
 345              	.L34:
 346 000c 00000000 		.word	htim4
 347              		.cfi_endproc
 348              	.LFE155:
 350              		.section	.text.USART1_IRQHandler,"ax",%progbits
 351              		.align	1
 352              		.global	USART1_IRQHandler
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu fpv5-d16
 358              	USART1_IRQHandler:
 359              	.LFB156:
 251:Core/Src/stm32h7xx_it.c **** 
 252:Core/Src/stm32h7xx_it.c **** /**
 253:Core/Src/stm32h7xx_it.c ****   * @brief This function handles USART1 global interrupt.
 254:Core/Src/stm32h7xx_it.c ****   */
 255:Core/Src/stm32h7xx_it.c **** void USART1_IRQHandler(void)
 256:Core/Src/stm32h7xx_it.c **** {
 360              		.loc 1 256 1 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 08B5     		push	{r3, lr}
 365              	.LCFI6:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 3, -8
 368              		.cfi_offset 14, -4
 257:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 258:Core/Src/stm32h7xx_it.c **** 
 259:Core/Src/stm32h7xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 260:Core/Src/stm32h7xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 369              		.loc 1 260 3 view .LVU41
 370 0002 0248     		ldr	r0, .L38
 371 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 372              	.LVL6:
 261:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 262:Core/Src/stm32h7xx_it.c **** 
 263:Core/Src/stm32h7xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 264:Core/Src/stm32h7xx_it.c **** }
 373              		.loc 1 264 1 is_stmt 0 view .LVU42
 374 0008 08BD     		pop	{r3, pc}
 375              	.L39:
 376 000a 00BF     		.align	2
 377              	.L38:
 378 000c 00000000 		.word	huart1
 379              		.cfi_endproc
 380              	.LFE156:
 382              		.section	.text.FDCAN_CAL_IRQHandler,"ax",%progbits
 383              		.align	1
 384              		.global	FDCAN_CAL_IRQHandler
ARM GAS  /tmp/ccusZplE.s 			page 12


 385              		.syntax unified
 386              		.thumb
 387              		.thumb_func
 388              		.fpu fpv5-d16
 390              	FDCAN_CAL_IRQHandler:
 391              	.LFB157:
 265:Core/Src/stm32h7xx_it.c **** 
 266:Core/Src/stm32h7xx_it.c **** /**
 267:Core/Src/stm32h7xx_it.c ****   * @brief This function handles FDCAN calibration unit interrupt.
 268:Core/Src/stm32h7xx_it.c ****   */
 269:Core/Src/stm32h7xx_it.c **** void FDCAN_CAL_IRQHandler(void)
 270:Core/Src/stm32h7xx_it.c **** {
 392              		.loc 1 270 1 is_stmt 1 view -0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396 0000 08B5     		push	{r3, lr}
 397              	.LCFI7:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 3, -8
 400              		.cfi_offset 14, -4
 271:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */
 272:Core/Src/stm32h7xx_it.c **** 
 273:Core/Src/stm32h7xx_it.c ****   /* USER CODE END FDCAN_CAL_IRQn 0 */
 274:Core/Src/stm32h7xx_it.c ****   HAL_FDCAN_IRQHandler(&hfdcan1);
 401              		.loc 1 274 3 view .LVU44
 402 0002 0248     		ldr	r0, .L42
 403 0004 FFF7FEFF 		bl	HAL_FDCAN_IRQHandler
 404              	.LVL7:
 275:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */
 276:Core/Src/stm32h7xx_it.c **** 
 277:Core/Src/stm32h7xx_it.c ****   /* USER CODE END FDCAN_CAL_IRQn 1 */
 278:Core/Src/stm32h7xx_it.c **** }
 405              		.loc 1 278 1 is_stmt 0 view .LVU45
 406 0008 08BD     		pop	{r3, pc}
 407              	.L43:
 408 000a 00BF     		.align	2
 409              	.L42:
 410 000c 00000000 		.word	hfdcan1
 411              		.cfi_endproc
 412              	.LFE157:
 414              		.section	.text.TIM23_IRQHandler,"ax",%progbits
 415              		.align	1
 416              		.global	TIM23_IRQHandler
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu fpv5-d16
 422              	TIM23_IRQHandler:
 423              	.LFB158:
 279:Core/Src/stm32h7xx_it.c **** 
 280:Core/Src/stm32h7xx_it.c **** /**
 281:Core/Src/stm32h7xx_it.c ****   * @brief This function handles TIM23 global interrupt.
 282:Core/Src/stm32h7xx_it.c ****   */
 283:Core/Src/stm32h7xx_it.c **** void TIM23_IRQHandler(void)
 284:Core/Src/stm32h7xx_it.c **** {
 424              		.loc 1 284 1 is_stmt 1 view -0
ARM GAS  /tmp/ccusZplE.s 			page 13


 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428 0000 08B5     		push	{r3, lr}
 429              	.LCFI8:
 430              		.cfi_def_cfa_offset 8
 431              		.cfi_offset 3, -8
 432              		.cfi_offset 14, -4
 285:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN TIM23_IRQn 0 */
 286:Core/Src/stm32h7xx_it.c **** 
 287:Core/Src/stm32h7xx_it.c ****   /* USER CODE END TIM23_IRQn 0 */
 288:Core/Src/stm32h7xx_it.c ****   HAL_TIM_IRQHandler(&htim23);
 433              		.loc 1 288 3 view .LVU47
 434 0002 0248     		ldr	r0, .L46
 435 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 436              	.LVL8:
 289:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN TIM23_IRQn 1 */
 290:Core/Src/stm32h7xx_it.c **** 
 291:Core/Src/stm32h7xx_it.c ****   /* USER CODE END TIM23_IRQn 1 */
 292:Core/Src/stm32h7xx_it.c **** }
 437              		.loc 1 292 1 is_stmt 0 view .LVU48
 438 0008 08BD     		pop	{r3, pc}
 439              	.L47:
 440 000a 00BF     		.align	2
 441              	.L46:
 442 000c 00000000 		.word	htim23
 443              		.cfi_endproc
 444              	.LFE158:
 446              		.text
 447              	.Letext0:
 448              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 449              		.file 3 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h723xx.h"
 450              		.file 4 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 451              		.file 5 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 452              		.file 6 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 453              		.file 7 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_fdcan.h"
 454              		.file 8 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
 455              		.file 9 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
ARM GAS  /tmp/ccusZplE.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_it.c
     /tmp/ccusZplE.s:17     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccusZplE.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccusZplE.s:43     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccusZplE.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccusZplE.s:67     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccusZplE.s:74     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccusZplE.s:91     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccusZplE.s:98     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccusZplE.s:115    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccusZplE.s:122    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccusZplE.s:139    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccusZplE.s:146    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccusZplE.s:159    .text.DMA1_Stream0_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:166    .text.DMA1_Stream0_IRQHandler:0000000000000000 DMA1_Stream0_IRQHandler
     /tmp/ccusZplE.s:186    .text.DMA1_Stream0_IRQHandler:000000000000000c $d
     /tmp/ccusZplE.s:191    .text.DMA1_Stream1_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:198    .text.DMA1_Stream1_IRQHandler:0000000000000000 DMA1_Stream1_IRQHandler
     /tmp/ccusZplE.s:218    .text.DMA1_Stream1_IRQHandler:000000000000000c $d
     /tmp/ccusZplE.s:223    .text.FDCAN1_IT0_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:230    .text.FDCAN1_IT0_IRQHandler:0000000000000000 FDCAN1_IT0_IRQHandler
     /tmp/ccusZplE.s:250    .text.FDCAN1_IT0_IRQHandler:000000000000000c $d
     /tmp/ccusZplE.s:255    .text.FDCAN1_IT1_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:262    .text.FDCAN1_IT1_IRQHandler:0000000000000000 FDCAN1_IT1_IRQHandler
     /tmp/ccusZplE.s:282    .text.FDCAN1_IT1_IRQHandler:000000000000000c $d
     /tmp/ccusZplE.s:287    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:294    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/ccusZplE.s:314    .text.TIM3_IRQHandler:000000000000000c $d
     /tmp/ccusZplE.s:319    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:326    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/ccusZplE.s:346    .text.TIM4_IRQHandler:000000000000000c $d
     /tmp/ccusZplE.s:351    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:358    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccusZplE.s:378    .text.USART1_IRQHandler:000000000000000c $d
     /tmp/ccusZplE.s:383    .text.FDCAN_CAL_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:390    .text.FDCAN_CAL_IRQHandler:0000000000000000 FDCAN_CAL_IRQHandler
     /tmp/ccusZplE.s:410    .text.FDCAN_CAL_IRQHandler:000000000000000c $d
     /tmp/ccusZplE.s:415    .text.TIM23_IRQHandler:0000000000000000 $t
     /tmp/ccusZplE.s:422    .text.TIM23_IRQHandler:0000000000000000 TIM23_IRQHandler
     /tmp/ccusZplE.s:442    .text.TIM23_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_DMA_IRQHandler
hdma_usart1_rx
hdma_usart1_tx
HAL_FDCAN_IRQHandler
hfdcan1
HAL_TIM_IRQHandler
htim3
htim4
HAL_UART_IRQHandler
huart1
htim23
